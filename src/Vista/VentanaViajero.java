package Vista;

import Controlador.ControladorAerolinea;
import Controlador.ControladorViajero;
import Exepciones.cupoLlenoException;
import Exepciones.maximoDeReservasException;
import Exepciones.reservaDeViajeroActiva;
import Modelo.Aerolinea;
import Modelo.Reserva;
import Modelo.Viajero;
import Modelo.Vuelo;
import java.awt.event.KeyAdapter;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author joans
 */
public class VentanaViajero extends javax.swing.JFrame {

    ControladorAerolinea controladorAerolinea;
    ControladorViajero controladorViajero;
    Viajero viajero;

    public VentanaViajero(Viajero viajero) {
        initComponents();
        setLocationRelativeTo(this);
        this.controladorAerolinea = new ControladorAerolinea();
        this.controladorViajero = new ControladorViajero();
        actualizarTabla();
        incializarComboBoxOrigen();
        incializarComboBoxDestino();
        llenarcbAerolinea();
        this.viajero = viajero;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAtras = new javax.swing.JButton();
        btnReservar = new javax.swing.JButton();
        cbAerolinea = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        cbOrigen = new javax.swing.JComboBox<>();
        cbDestino = new javax.swing.JComboBox<>();
        txtFecha = new javax.swing.JTextField();
        btnFiltrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tblTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Origen", "Destino", "Fecha", "Hora de Salida"
            }
        ));
        jScrollPane1.setViewportView(tblTabla);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Fecha");

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Origen ");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Destino");

        btnAtras.setBackground(new java.awt.Color(255, 214, 94));
        btnAtras.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        btnAtras.setForeground(new java.awt.Color(0, 0, 0));
        btnAtras.setText("Atras");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnReservar.setBackground(new java.awt.Color(255, 214, 94));
        btnReservar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        btnReservar.setForeground(new java.awt.Color(0, 0, 0));
        btnReservar.setText("Reservar");
        btnReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservarActionPerformed(evt);
            }
        });

        cbAerolinea.setBackground(new java.awt.Color(255, 255, 255));
        cbAerolinea.setForeground(new java.awt.Color(0, 0, 0));
        cbAerolinea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbAerolineaItemStateChanged(evt);
            }
        });
        cbAerolinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAerolineaActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Aerolinea");

        cbOrigen.setBackground(new java.awt.Color(255, 255, 255));
        cbOrigen.setForeground(new java.awt.Color(0, 0, 0));
        cbOrigen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbOrigenItemStateChanged(evt);
            }
        });
        cbOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOrigenActionPerformed(evt);
            }
        });

        cbDestino.setBackground(new java.awt.Color(255, 255, 255));
        cbDestino.setForeground(new java.awt.Color(0, 0, 0));
        cbDestino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDestinoItemStateChanged(evt);
            }
        });
        cbDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDestinoActionPerformed(evt);
            }
        });

        txtFecha.setBackground(new java.awt.Color(255, 255, 255));
        txtFecha.setForeground(new java.awt.Color(0, 0, 0));
        txtFecha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFechaKeyTyped(evt);
            }
        });

        btnFiltrar.setBackground(new java.awt.Color(255, 214, 94));
        btnFiltrar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        btnFiltrar.setForeground(new java.awt.Color(0, 0, 0));
        btnFiltrar.setText("Filtrar");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(cbOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(cbDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbAerolinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(166, 166, 166)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnReservar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAtras))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(cbDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cbAerolinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltrar))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(btnAtras)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReservar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        VentanaViajeroMenu ventana = new VentanaViajeroMenu(viajero);
        ventana.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservarActionPerformed
        try {
            int filaSeleccionada = tblTabla.getSelectedRow();
            if (filaSeleccionada != -1) {
                String codigo = (String) tblTabla.getValueAt(filaSeleccionada, 6);
                Vuelo vuelo = controladorViajero.verificarVuelo(codigo);
                Reserva reserva = new Reserva(vuelo, viajero);
                controladorViajero.reservarVuelo(reserva);
                JOptionPane.showMessageDialog(null, "Se reservo el vuelo");
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione el vuelo que desea reservar");
            }
        } catch (reservaDeViajeroActiva| cupoLlenoException|maximoDeReservasException e) {
      JOptionPane.showMessageDialog(null, e.getMessage());
          
        }


    }//GEN-LAST:event_btnReservarActionPerformed

    private void cbAerolineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAerolineaActionPerformed


    }//GEN-LAST:event_cbAerolineaActionPerformed

    private void cbOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOrigenActionPerformed

    }//GEN-LAST:event_cbOrigenActionPerformed

    private void cbDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDestinoActionPerformed

    }//GEN-LAST:event_cbDestinoActionPerformed

    private void cbOrigenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbOrigenItemStateChanged

        // TODO add your handling code here:
    }//GEN-LAST:event_cbOrigenItemStateChanged

    private void cbAerolineaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbAerolineaItemStateChanged

        // TODO add your handling code here:
    }//GEN-LAST:event_cbAerolineaItemStateChanged

    private void cbDestinoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDestinoItemStateChanged

        // TODO add your handling code here:
    }//GEN-LAST:event_cbDestinoItemStateChanged

    private void txtFechaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFechaKeyTyped

    }//GEN-LAST:event_txtFechaKeyTyped

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        String fecha = txtFecha.getText();
        String origen = cbOrigen.getSelectedItem().toString();
        String Destino = cbDestino.getSelectedItem().toString();
        String nombreAereolinea = cbAerolinea.getSelectedItem().toString();
        int totalVuelos = 0;
        for (Aerolinea aerolinea : controladorAerolinea.getListaAerolineas()) {
            totalVuelos += aerolinea.getListaVuelos().size();
        }
        DefaultTableModel modelo3 = new DefaultTableModel(new String[]{"ORIGEN", "DESTINO", "FECHA", "HORA SALIDA",
            "TIEMPO TRAYECTORIA", "AVION", "CODIGO VUELO", "Aereolinea"},
                totalVuelos);
        tblTabla.setModel(modelo3);
        TableModel modeloDatos3 = tblTabla.getModel();
        int fila = 0;
        for (int i = 0; i < controladorAerolinea.getListaAerolineas().size(); i++) {
            for (int j = 0; j < controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().size(); j++) {
                if (controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getOrigen().equals(origen) && controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getDestino().equals(Destino)) {
                    if (fila < totalVuelos) {
                        Vuelo aux = controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j);
                        SimpleDateFormat standar1 = new SimpleDateFormat("dd/MM/yyyy");
                        modeloDatos3.setValueAt(aux.getOrigen(), fila, 0);
                        modeloDatos3.setValueAt(aux.getDestino(), fila, 1);
                        modeloDatos3.setValueAt(standar1.format(java.sql.Date.valueOf(aux.getFechaLlegada().toLocalDate())), fila, 2);
                        modeloDatos3.setValueAt(((aux.getFechaSalida().toLocalTime().toString())), fila, 3);
                        modeloDatos3.setValueAt(aux.getFechaLlegada().toLocalTime().toString(), fila, 4);
                        modeloDatos3.setValueAt(aux.getAvion().getModelo(), fila, 5);
                        modeloDatos3.setValueAt(aux.getCodigoVuelo(), fila, 6);
                        modeloDatos3.setValueAt(controladorAerolinea.getListaAerolineas().get(i).getNombreAerolinea(), fila, 7);
                    }
                }
            }
        }
        TableRowSorter<DefaultTableModel> filtro3 = new TableRowSorter<>(modelo3);
        tblTabla.setRowSorter(filtro3);
        if (fecha.isEmpty() && origen.equals("Origen") && Destino.equals("Destino") && nombreAereolinea.equals("Aerolinea")) {
            actualizarTabla();
        } else if (fecha.isEmpty() && origen != "Origen" && Destino.equals("Destino") && nombreAereolinea.equals("Aerolinea")) {
            filtrarOrigen(origen);
        } else if (fecha.isEmpty() && origen.equals("Origen") && Destino != "Destino" && nombreAereolinea.equals("Aerolinea")) {
            filtrarDestino(Destino);
        } else if (fecha.isEmpty() && origen.equals("Origen") && Destino.equals("Destino") && nombreAereolinea != "Aerolinea") {
            filtrarAereolinea(nombreAereolinea);
        } else if (fecha != " " && origen.equals("Origen") && Destino.equals("Destino") && nombreAereolinea.equals("Aerolinea")) {
            filtrarFecha(fecha);
        } else if (fecha != " " && origen != "Origen" && Destino != "Destino") {
            filtro3.setRowFilter(RowFilter.regexFilter(fecha, 2));
        } else {
            tblTabla.setRowSorter(filtro3);
        }
    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void actualizarTabla() {
        int totalVuelos = 0;
        LocalDateTime fechaHoy = LocalDateTime.now();
        for (Aerolinea aerolinea : controladorAerolinea.getListaAerolineas()) {
            totalVuelos += aerolinea.getListaVuelos().size();
        }
        DefaultTableModel modelo = new DefaultTableModel(new String[]{"ORIGEN", "DESTINO", "FECHA", "HORA SALIDA",
            "HORA LLEGADA", "AVION", "CODIGO V", "Aereolinea"},
                totalVuelos);
        tblTabla.setModel(modelo);
        TableModel modeloDatos = tblTabla.getModel();
        SimpleDateFormat standar1 = new SimpleDateFormat("dd/MM/yyyy");
        int fila = 0;
        for (int i = 0; i < controladorAerolinea.getListaAerolineas().size(); i++) {
            for (int j = 0; j < controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().size(); j++) {
                if (controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getAvion().getNum_Sillas() > 0
                        && fechaHoy.isBefore((controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getFechaSalida()))) {
                    if (fila < totalVuelos) {
                        Vuelo aux = controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j);
                        modeloDatos.setValueAt(aux.getOrigen(), fila, 0);
                        modeloDatos.setValueAt(aux.getDestino(), fila, 1);
                        modeloDatos.setValueAt(standar1.format(java.sql.Date.valueOf(aux.getFechaLlegada().toLocalDate())), fila, 2);
                        modeloDatos.setValueAt(((aux.getFechaSalida().toLocalTime().toString())), fila, 3);
                        modeloDatos.setValueAt(aux.getFechaLlegada().toLocalTime().toString(), fila, 4);
                        modeloDatos.setValueAt(aux.getAvion().getModelo(), fila, 5);
                        modeloDatos.setValueAt(aux.getCodigoVuelo(), fila, 6);
                        modeloDatos.setValueAt(controladorAerolinea.getListaAerolineas().get(i).getNombreAerolinea(), fila, 7);
                        fila++;
                    }
                }
            }
        }
    }

    public void llenarcbAerolinea() {
        cbAerolinea.removeAllItems();
        cbAerolinea.addItem("Aerolinea");
        for (int i = 0; i < controladorAerolinea.getListaAerolineas().size(); i++) {
            cbAerolinea.addItem(controladorAerolinea.getListaAerolineas().get(i).getNombreAerolinea());
        }
    }

    private void incializarComboBoxOrigen() {
        cbOrigen.removeAllItems();
        cbOrigen.addItem("Origen");
        cbOrigen.addItem("Armenia");
        cbOrigen.addItem("Bogota");
        cbOrigen.addItem("Manizales");
        cbOrigen.addItem("Pereira");
        cbOrigen.addItem("Cali");
        cbOrigen.addItem("Bucaramanga");
    }

    private void incializarComboBoxDestino() {
        cbDestino.removeAllItems();
        cbDestino.addItem("Destino");
        cbDestino.addItem("Armenia");
        cbDestino.addItem("Bogota");
        cbDestino.addItem("Manizales");
        cbDestino.addItem("Pereira");
        cbDestino.addItem("Cali");
        cbDestino.addItem("Bucaramanga");
    }

    //--------------------------------------- METODO DE FILTRAR ------------------------------------   
    private void filtrarAereolinea(String nombreAereolinea) {
        Aerolinea aerolinea = controladorViajero.buscarAerolinea(nombreAereolinea);
        LocalDateTime fechaHoy = LocalDateTime.now();
        if (aerolinea != null) {
            // Guarda el modelo actual antes de cambiarlo

            DefaultTableModel modelo = new DefaultTableModel(
                    new String[]{"ORIGEN", "DESTINO", "FECHA", "HORA SALIDA",
                        "TIEMPO TRAYECTORIA", "AVION", "CODIGO VUELO", "Aereolinea"},
                    aerolinea.getListaVuelos().size()
            );
            tblTabla.setModel(modelo);
            TableModel modeloDatos = tblTabla.getModel();
            int fila = 0;
            for (int i = 0; i < aerolinea.getListaVuelos().size(); i++) {
                Vuelo aux = aerolinea.getListaVuelos().get(i);
                SimpleDateFormat standar1 = new SimpleDateFormat("dd/MM/yyyy");
                if (aerolinea.getListaVuelos().get(i).getAvion().getNum_Sillas() > 0
                        && fechaHoy.isBefore((aerolinea.getListaVuelos().get(i).getFechaSalida()))) {
                    if (fila < aerolinea.getListaVuelos().size()) {
                        modeloDatos.setValueAt(aux.getOrigen(), fila, 0);
                        modeloDatos.setValueAt(aux.getDestino(), fila, 1);
                        modeloDatos.setValueAt(standar1.format(java.sql.Date.valueOf(aux.getFechaLlegada().toLocalDate())), fila, 2);
                        modeloDatos.setValueAt(aux.getFechaSalida().toLocalTime().toString(), fila, 3);
                        modeloDatos.setValueAt(aux.getFechaLlegada().toLocalTime().toString(), fila, 4);
                        modeloDatos.setValueAt(aux.getAvion().getModelo(), fila, 5);
                        modeloDatos.setValueAt(aux.getCodigoVuelo(), fila, 6);
                        modeloDatos.setValueAt(aerolinea.getNombreAerolinea(), fila, 7);
                        fila++;
                    }
                }
            }
            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
            tblTabla.setRowSorter(sorter);
        }
    }

    private void filtrarOrigen(String origen) {
        int totalVuelos = 0;
        LocalDateTime fechaHoy = LocalDateTime.now();
        for (Aerolinea aerolinea : controladorAerolinea.getListaAerolineas()) {
            totalVuelos += aerolinea.getListaVuelos().size();
        }
        int fila = 0;
        DefaultTableModel modelo = new DefaultTableModel(new String[]{"ORIGEN", "DESTINO", "FECHA", "HORA SALIDA",
            "TIEMPO TRAYECTORIA", "AVION", "CODIGO VUELO", "Aereolinea"},
                totalVuelos);
        tblTabla.setModel(modelo);
        TableModel modeloDatos = tblTabla.getModel();
        for (int i = 0; i < controladorAerolinea.getListaAerolineas().size(); i++) {
            for (int j = 0; j < controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().size(); j++) {
                if (controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getOrigen().equals(origen)
                        && controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getAvion().getNum_Sillas() > 0
                        && fechaHoy.isBefore((controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getFechaSalida()))) {
                    if (fila < totalVuelos) {
                        Vuelo aux = controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j);
                        SimpleDateFormat standar1 = new SimpleDateFormat("dd/MM/yyyy");
                        modeloDatos.setValueAt(aux.getOrigen(), fila, 0);
                        modeloDatos.setValueAt(aux.getDestino(), fila, 1);
                        modeloDatos.setValueAt(standar1.format(java.sql.Date.valueOf(aux.getFechaLlegada().toLocalDate())), fila, 2);
                        modeloDatos.setValueAt(((aux.getFechaSalida().toLocalTime().toString())), fila, 3);
                        modeloDatos.setValueAt(aux.getFechaLlegada().toLocalTime().toString(), fila, 4);
                        modeloDatos.setValueAt(aux.getAvion().getModelo(), fila, 5);
                        modeloDatos.setValueAt(aux.getCodigoVuelo(), fila, 6);
                        modeloDatos.setValueAt(controladorAerolinea.getListaAerolineas().get(i).getNombreAerolinea(), fila, 7);
                        fila++;
                    }
                }
            }
        }
    }

    private void filtrarDestino(String destino) {
        int totalVuelos = 0;
        LocalDateTime fechaHoy = LocalDateTime.now();
        for (Aerolinea aerolinea : controladorAerolinea.getListaAerolineas()) {
            totalVuelos += aerolinea.getListaVuelos().size();
        }
        DefaultTableModel modelo = new DefaultTableModel(new String[]{"ORIGEN", "DESTINO", "FECHA", "HORA SALIDA",
            "TIEMPO TRAYECTORIA", "AVION", "CODIGO VUELO", "Aereolinea"},
                totalVuelos);
        int fila = 0;
        tblTabla.setModel(modelo);
        TableModel modeloDatos = tblTabla.getModel();
        for (int i = 0; i < controladorAerolinea.getListaAerolineas().size(); i++) {
            for (int j = 0; j < controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().size(); j++) {
                if (controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getDestino().equals(destino)
                        && controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getAvion().getNum_Sillas() > 0
                        && fechaHoy.isBefore((controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getFechaSalida()))) {
                    if (fila < totalVuelos) {
                        Vuelo aux = controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j);
                        SimpleDateFormat standar1 = new SimpleDateFormat("dd/MM/yyyy");
                        modeloDatos.setValueAt(aux.getOrigen(), fila, 0);
                        modeloDatos.setValueAt(aux.getDestino(), fila, 1);
                        modeloDatos.setValueAt(standar1.format(java.sql.Date.valueOf(aux.getFechaLlegada().toLocalDate())), fila, 2);
                        modeloDatos.setValueAt(((aux.getFechaSalida().toLocalTime().toString())), fila, 3);
                        modeloDatos.setValueAt(aux.getFechaLlegada().toLocalTime().toString(), fila, 4);
                        modeloDatos.setValueAt(aux.getAvion().getModelo(), fila, 5);
                        modeloDatos.setValueAt(aux.getCodigoVuelo(), fila, 6);
                        modeloDatos.setValueAt(controladorAerolinea.getListaAerolineas().get(i).getNombreAerolinea(), fila, 7);
                        fila++;
                    }
                }
            }
        }
    }

    private void filtrarFecha(String fecha) {
        int totalVuelos = 0;
        for (Aerolinea aerolinea : controladorAerolinea.getListaAerolineas()) {
            totalVuelos += aerolinea.getListaVuelos().size();
        }
        DefaultTableModel modelo = new DefaultTableModel(new String[]{"ORIGEN", "DESTINO", "FECHA", "HORA SALIDA",
            "TIEMPO TRAYECTORIA", "AVION", "CODIGO VUELO", "Aereolinea"},
                totalVuelos);
        LocalDateTime fechaHoy = LocalDateTime.now();
        int fila = 0;
        tblTabla.setModel(modelo);
        TableModel modeloDatos = tblTabla.getModel();
        for (int i = 0; i < controladorAerolinea.getListaAerolineas().size(); i++) {
            for (int j = 0; j < controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().size(); j++) {
                if (controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getAvion().getNum_Sillas() > 0
                        && fechaHoy.isBefore((controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j).getFechaSalida()))) {
                    if (fila < totalVuelos) {
                        Vuelo aux = controladorAerolinea.getListaAerolineas().get(i).getListaVuelos().get(j);
                        SimpleDateFormat standar1 = new SimpleDateFormat("dd/MM/yyyy");
                        modeloDatos.setValueAt(aux.getOrigen(), fila, 0);
                        modeloDatos.setValueAt(aux.getDestino(), fila, 1);
                        modeloDatos.setValueAt(standar1.format(java.sql.Date.valueOf(aux.getFechaLlegada().toLocalDate())), fila, 2);
                        modeloDatos.setValueAt(((aux.getFechaSalida().toLocalTime().toString())), fila, 3);
                        modeloDatos.setValueAt(aux.getFechaLlegada().toLocalTime().toString(), fila, 4);
                        modeloDatos.setValueAt(aux.getAvion().getModelo(), fila, 5);
                        modeloDatos.setValueAt(aux.getCodigoVuelo(), fila, 6);
                        modeloDatos.setValueAt(controladorAerolinea.getListaAerolineas().get(i).getNombreAerolinea(), fila, 7);
                        fila++;
                    }
                }
            }
        }
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(modelo);
        tblTabla.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(fecha, 2));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnReservar;
    private javax.swing.JComboBox<String> cbAerolinea;
    private javax.swing.JComboBox<String> cbDestino;
    private javax.swing.JComboBox<String> cbOrigen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTabla;
    private javax.swing.JTextField txtFecha;
    // End of variables declaration//GEN-END:variables
}
